/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo.api;

import com.example.demo.model.AddAddressReq;
import com.example.demo.model.AddCardReq;
import com.example.demo.model.Address;
import com.example.demo.model.Authorization;
import com.example.demo.model.Card;
import com.example.demo.model.Cart;
import com.example.demo.model.Item;
import com.example.demo.model.NewOrder;
import com.example.demo.model.Order;
import com.example.demo.model.PaymentReq;
import com.example.demo.model.Product;
import com.example.demo.model.Shipment;
import com.example.demo.model.ShippingReq;
import com.example.demo.model.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-23T16:28:53.596787+03:00[Europe/Istanbul]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "cart", description = "Everything about cart")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/carts/{customerId}/items : Adds an item in shopping cart
     * Adds an item to the shopping cart if it doesn&#39;t already exist, or increment quantity by the specified number of items if it does.
     *
     * @param customerId Customer Identifier (required)
     * @param item Item object (optional)
     * @return Item added successfully (status code 201)
     *         or Given customer ID doesn&#39;t exist (status code 404)
     */
    @Operation(
        operationId = "addCartItemsByCustomerId",
        summary = "Adds an item in shopping cart",
        description = "Adds an item to the shopping cart if it doesn't already exist, or increment quantity by the specified number of items if it does.",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Item added successfully", content = {
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Item.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Item.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Given customer ID doesn't exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/carts/{customerId}/items",
        produces = { "application/xml", "application/json" },
        consumes = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<Item>> addCartItemsByCustomerId(
        @Parameter(name = "customerId", description = "Customer Identifier", required = true, in = ParameterIn.PATH) @PathVariable("customerId") String customerId,
        @Parameter(name = "Item", description = "Item object") @Valid @RequestBody(required = false) Item item
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }, { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Item> <id>aeiou</id> <quantity>123</quantity> <unitPrice>3.149</unitPrice> </Item>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/carts/{customerId}/items : Replace/add an item in shopping cart
     * Adds an item to the shopping cart if it doesn&#39;t already exist, or replace with given item if it does.
     *
     * @param customerId Customer Identifier (required)
     * @param item Item object (optional)
     * @return Item added successfully (status code 201)
     *         or Given customer ID doesn&#39;t exist (status code 404)
     */
    @Operation(
        operationId = "addOrReplaceItemsByCustomerId",
        summary = "Replace/add an item in shopping cart",
        description = "Adds an item to the shopping cart if it doesn't already exist, or replace with given item if it does.",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Item added successfully", content = {
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Item.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Item.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Given customer ID doesn't exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/carts/{customerId}/items",
        produces = { "application/xml", "application/json" },
        consumes = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<Item>> addOrReplaceItemsByCustomerId(
        @Parameter(name = "customerId", description = "Customer Identifier", required = true, in = ParameterIn.PATH) @PathVariable("customerId") String customerId,
        @Parameter(name = "Item", description = "Item object") @Valid @RequestBody(required = false) Item item
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }, { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <id>aeiou</id> <quantity>123</quantity> <unitPrice>3.149</unitPrice> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/orders : Creates a new order for the given order request
     * Creates a new order for the given order request.
     *
     * @param newOrder New Order Request object (optional)
     * @return Order added successfully (status code 201)
     *         or If payment is not authorized. (status code 406)
     */
    @Operation(
        operationId = "addOrder",
        summary = "Creates a new order for the given order request",
        description = "Creates a new order for the given order request.",
        tags = { "order" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Order added successfully", content = {
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Order.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Order.class)))
            }),
            @ApiResponse(responseCode = "406", description = "If payment is not authorized.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/orders",
        produces = { "application/xml", "application/json" },
        consumes = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<Order>> addOrder(
        @Parameter(name = "NewOrder", description = "New Order Request object") @Valid @RequestBody(required = false) NewOrder newOrder
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"total\" : 1.4658129805029452, \"address\" : { \"residency\" : \"residency\", \"number\" : \"number\", \"country\" : \"country\", \"pincode\" : \"pincode\", \"city\" : \"city\", \"street\" : \"street\", \"state\" : \"state\" }, \"shipment\" : { \"carrier\" : \"carrier\", \"estDeliveryDate\" : \"2000-01-23\", \"orderId\" : \"orderId\", \"trackingNumber\" : \"trackingNumber\" }, \"payment\" : { \"authorized\" : true, \"message\" : \"message\" }, \"id\" : \"id\", \"items\" : [ { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }, { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" } ], \"card\" : { \"expires\" : \"expires\", \"ccv\" : \"ccv\", \"cardNumber\" : \"cardNumber\" }, \"customer\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"userStatus\" : 6, \"phone\" : \"phone\", \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" }, \"status\" : \"CREATED\" }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"total\" : 1.4658129805029452, \"address\" : { \"residency\" : \"residency\", \"number\" : \"number\", \"country\" : \"country\", \"pincode\" : \"pincode\", \"city\" : \"city\", \"street\" : \"street\", \"state\" : \"state\" }, \"shipment\" : { \"carrier\" : \"carrier\", \"estDeliveryDate\" : \"2000-01-23\", \"orderId\" : \"orderId\", \"trackingNumber\" : \"trackingNumber\" }, \"payment\" : { \"authorized\" : true, \"message\" : \"message\" }, \"id\" : \"id\", \"items\" : [ { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }, { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" } ], \"card\" : { \"expires\" : \"expires\", \"ccv\" : \"ccv\", \"cardNumber\" : \"cardNumber\" }, \"customer\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"userStatus\" : 6, \"phone\" : \"phone\", \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" }, \"status\" : \"CREATED\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Order> <id>aeiou</id> <date>2000-01-23T04:56:07.000Z</date> <Item> <id>aeiou</id> <quantity>123</quantity> <unitPrice>3.149</unitPrice> </Item> <total>3.149</total> <status>aeiou</status> </Order>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/payments : Authorize a payment request
     * Authorize a payment request.
     *
     * @param paymentReq  (optional)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "authorize",
        summary = "Authorize a payment request",
        description = "Authorize a payment request.",
        tags = { "payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Authorization.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Authorization.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/payments",
        produces = { "application/xml", "application/json" },
        consumes = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<Authorization> authorize(
        @Parameter(name = "PaymentReq", description = "") @Valid @RequestBody(required = false) PaymentReq paymentReq
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"orderId\" : \"orderId\", \"authorized\" : true, \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"message\" : \"message\", \"error\" : \"error\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Authorization> <orderId>aeiou</orderId> <time>2000-01-23T04:56:07.000Z</time> <authorized>true</authorized> <message>aeiou</message> <error>aeiou</error> </Authorization>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/addresses : Creates a new user addresses
     * Creates a new user addresses. Does nothing if address already exists.
     *
     * @param addAddressReq  (optional)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "createAddress",
        summary = "Creates a new user addresses",
        description = "Creates a new user addresses. Does nothing if address already exists.",
        tags = { "address" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Address.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Address.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/addresses",
        produces = { "application/xml", "application/json" },
        consumes = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<Address> createAddress(
        @Parameter(name = "AddAddressReq", description = "") @Valid @RequestBody(required = false) AddAddressReq addAddressReq
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"residency\" : \"residency\", \"number\" : \"number\", \"country\" : \"country\", \"pincode\" : \"pincode\", \"city\" : \"city\", \"street\" : \"street\", \"state\" : \"state\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Address> <number>aeiou</number> <residency>aeiou</residency> <street>aeiou</street> <city>aeiou</city> <state>aeiou</state> <country>aeiou</country> <pincode>aeiou</pincode> </Address>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/addresses/{id} : Deletes user&#39;s address
     * Deletes user&#39;s address based on given address ID.
     *
     * @param id address Identifier (required)
     * @return Accepts the deletion request and perform deletion. If ID does not exist, does nothing. (status code 202)
     */
    @Operation(
        operationId = "deleteAddressesById",
        summary = "Deletes user's address",
        description = "Deletes user's address based on given address ID.",
        tags = { "address" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Accepts the deletion request and perform deletion. If ID does not exist, does nothing.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/addresses/{id}"
    )
    
    default ResponseEntity<Void> deleteAddressesById(
        @Parameter(name = "id", description = "address Identifier", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/cards/{id} : Deletes card&#39;s address
     * Deletes card&#39;s address based on given card ID.
     *
     * @param id card Identifier (required)
     * @return Accepts the deletion request and perform deletion. If ID does not exist, does nothing. (status code 202)
     */
    @Operation(
        operationId = "deleteCardById",
        summary = "Deletes card's address",
        description = "Deletes card's address based on given card ID.",
        tags = { "card" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Accepts the deletion request and perform deletion. If ID does not exist, does nothing.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/cards/{id}"
    )
    
    default ResponseEntity<Void> deleteCardById(
        @Parameter(name = "id", description = "card Identifier", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/carts/{customerId} : Delete the shopping cart
     * Deletes the shopping cart of given customer
     *
     * @param customerId Customer Identifier (required)
     * @return successful operation (status code 204)
     *         or Given customer ID doesn&#39;t exist (status code 404)
     */
    @Operation(
        operationId = "deleteCart",
        summary = "Delete the shopping cart",
        description = "Deletes the shopping cart of given customer",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "204", description = "successful operation"),
            @ApiResponse(responseCode = "404", description = "Given customer ID doesn't exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/carts/{customerId}"
    )
    
    default ResponseEntity<Void> deleteCart(
        @Parameter(name = "customerId", description = "Customer Identifier", required = true, in = ParameterIn.PATH) @PathVariable("customerId") String customerId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/customers/{id} : Deletes the customer
     * Deletes the customer identifiable by given ID
     *
     * @param id Customer Identifier (required)
     * @return Request accepted, returns this status even if user does not exist (status code 202)
     */
    @Operation(
        operationId = "deleteCustomerById",
        summary = "Deletes the customer",
        description = "Deletes the customer identifiable by given ID",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Request accepted, returns this status even if user does not exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/customers/{id}"
    )
    
    default ResponseEntity<Void> deleteCustomerById(
        @Parameter(name = "id", description = "Customer Identifier", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/carts/{customerId}/items/{itemId} : Delete the item from shopping cart
     * Deletes the item from shopping cart of given customer
     *
     * @param customerId Customer Identifier (required)
     * @param itemId Item (product) Identifier (required)
     * @return Accepts the request, regardless of whether the specified item exists in the cart or not. (status code 202)
     */
    @Operation(
        operationId = "deleteItemFromCart",
        summary = "Delete the item from shopping cart",
        description = "Deletes the item from shopping cart of given customer",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Accepts the request, regardless of whether the specified item exists in the cart or not.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/carts/{customerId}/items/{itemId}"
    )
    
    default ResponseEntity<Void> deleteItemFromCart(
        @Parameter(name = "customerId", description = "Customer Identifier", required = true, in = ParameterIn.PATH) @PathVariable("customerId") String customerId,
        @Parameter(name = "itemId", description = "Item (product) Identifier", required = true, in = ParameterIn.PATH) @PathVariable("itemId") String itemId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/customers/{id}/addresses : Returns all customer&#39;s addresses
     * Returns all customer&#39;s addresses based on given customer ID
     *
     * @param id Customer Identifier (required)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "getAddressesByCustomerId",
        summary = "Returns all customer's addresses",
        description = "Returns all customer's addresses based on given customer ID",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Address.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Address.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customers/{id}/addresses",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<Address> getAddressesByCustomerId(
        @Parameter(name = "id", description = "Customer Identifier", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"residency\" : \"residency\", \"number\" : \"number\", \"country\" : \"country\", \"pincode\" : \"pincode\", \"city\" : \"city\", \"street\" : \"street\", \"state\" : \"state\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Address> <number>aeiou</number> <residency>aeiou</residency> <street>aeiou</street> <city>aeiou</city> <state>aeiou</state> <country>aeiou</country> <pincode>aeiou</pincode> </Address>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/addresses/{id} : Returns user&#39;s address
     * Returns user&#39;s address based on given address ID.
     *
     * @param id address Identifier (required)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "getAddressesById",
        summary = "Returns user's address",
        description = "Returns user's address based on given address ID.",
        tags = { "address" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Address.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Address.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/addresses/{id}",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<Address> getAddressesById(
        @Parameter(name = "id", description = "address Identifier", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"residency\" : \"residency\", \"number\" : \"number\", \"country\" : \"country\", \"pincode\" : \"pincode\", \"city\" : \"city\", \"street\" : \"street\", \"state\" : \"state\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Address> <number>aeiou</number> <residency>aeiou</residency> <street>aeiou</street> <city>aeiou</city> <state>aeiou</state> <country>aeiou</country> <pincode>aeiou</pincode> </Address>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/addresses : Returns all user&#39;s addresses
     * Returns all user&#39;s addresses, else empty collection
     *
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "getAllAddresses",
        summary = "Returns all user's addresses",
        description = "Returns all user's addresses, else empty collection",
        tags = { "address" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Address.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Address.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/addresses",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<Address>> getAllAddresses(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"residency\" : \"residency\", \"number\" : \"number\", \"country\" : \"country\", \"pincode\" : \"pincode\", \"city\" : \"city\", \"street\" : \"street\", \"state\" : \"state\" }, { \"residency\" : \"residency\", \"number\" : \"number\", \"country\" : \"country\", \"pincode\" : \"pincode\", \"city\" : \"city\", \"street\" : \"street\", \"state\" : \"state\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Address> <number>aeiou</number> <residency>aeiou</residency> <street>aeiou</street> <city>aeiou</city> <state>aeiou</state> <country>aeiou</country> <pincode>aeiou</pincode> </Address>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/cards : Returns all user&#39;s cards
     * Returns all user&#39;s cards, else empty collection
     *
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "getAllCards",
        summary = "Returns all user's cards",
        description = "Returns all user's cards, else empty collection",
        tags = { "card" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Card.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Card.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/cards",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<Card>> getAllCards(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"expires\" : \"expires\", \"ccv\" : \"ccv\", \"cardNumber\" : \"cardNumber\" }, { \"expires\" : \"expires\", \"ccv\" : \"ccv\", \"cardNumber\" : \"cardNumber\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Card> <cardNumber>aeiou</cardNumber> <expires>aeiou</expires> <ccv>aeiou</ccv> </Card>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/customers : Returns all customers
     * Returns all customers, or empty collection if no use found
     *
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "getAllCustomers",
        summary = "Returns all customers",
        description = "Returns all customers, or empty collection if no use found",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = User.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customers",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<User>> getAllCustomers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"userStatus\" : 6, \"phone\" : \"phone\", \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"userStatus\" : 6, \"phone\" : \"phone\", \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<User> <id>123456789</id> <username>aeiou</username> <firstName>aeiou</firstName> <lastName>aeiou</lastName> <email>aeiou</email> <password>aeiou</password> <phone>aeiou</phone> <userStatus>123</userStatus> </User>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/cards/{id} : Returns user&#39;s card
     * Returns user&#39;s card based on given card ID.
     *
     * @param id card Identifier (required)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "getCardById",
        summary = "Returns user's card",
        description = "Returns user's card based on given card ID.",
        tags = { "card" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Card.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Card.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/cards/{id}",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<Card> getCardById(
        @Parameter(name = "id", description = "card Identifier", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expires\" : \"expires\", \"ccv\" : \"ccv\", \"cardNumber\" : \"cardNumber\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Card> <cardNumber>aeiou</cardNumber> <expires>aeiou</expires> <ccv>aeiou</ccv> </Card>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/customers/{id}/cards : Returns all customer&#39;s cards
     * Returns all customer&#39;s cards based on given customer ID
     *
     * @param id Customer Identifier (required)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "getCardsByCustomerId",
        summary = "Returns all customer's cards",
        description = "Returns all customer's cards based on given customer ID",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Card.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Card.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customers/{id}/cards",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<Card> getCardsByCustomerId(
        @Parameter(name = "id", description = "Customer Identifier", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expires\" : \"expires\", \"ccv\" : \"ccv\", \"cardNumber\" : \"cardNumber\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Card> <cardNumber>aeiou</cardNumber> <expires>aeiou</expires> <ccv>aeiou</ccv> </Card>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/carts/{customerId} : Returns the shopping cart
     * Returns the shopping cart of given customer
     *
     * @param customerId Customer Identifier (required)
     * @return successful operation (status code 200)
     *         or Given customer ID doesn&#39;t exist (status code 404)
     */
    @Operation(
        operationId = "getCartByCustomerId",
        summary = "Returns the shopping cart",
        description = "Returns the shopping cart of given customer",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Cart.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Cart.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Given customer ID doesn't exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/carts/{customerId}",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<Cart>> getCartByCustomerId(
        @Parameter(name = "customerId", description = "Customer Identifier", required = true, in = ParameterIn.PATH) @PathVariable("customerId") String customerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"customerId\" : \"customerId\", \"items\" : [ { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }, { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" } ] }, { \"customerId\" : \"customerId\", \"items\" : [ { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }, { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <customerId>aeiou</customerId> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/carts/{customerId}/items : Returns the list of products in user&#39;s shopping cart
     * Returns the items in shopping cart of given customer
     *
     * @param customerId Customer Identifier (required)
     * @return successful operation (status code 200)
     *         or Given customer ID doesn&#39;t exist (status code 404)
     */
    @Operation(
        operationId = "getCartItemsByCustomerId",
        summary = "Returns the list of products in user's shopping cart",
        description = "Returns the items in shopping cart of given customer",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Item.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Item.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Given customer ID doesn't exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/carts/{customerId}/items",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<Item>> getCartItemsByCustomerId(
        @Parameter(name = "customerId", description = "Customer Identifier", required = true, in = ParameterIn.PATH) @PathVariable("customerId") String customerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }, { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <id>aeiou</id> <quantity>123</quantity> <unitPrice>3.149</unitPrice> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/carts/{customerId}/items/{itemId} : Returns given item from user&#39;s shopping cart
     * Returns given item from shopping cart of given customer
     *
     * @param customerId Customer Identifier (required)
     * @param itemId Item (product) Identifier (required)
     * @return If item exists in cart (status code 200)
     *         or Given item (product) ID doesn&#39;t exist (status code 404)
     */
    @Operation(
        operationId = "getCartItemsByItemId",
        summary = "Returns given item from user's shopping cart",
        description = "Returns given item from shopping cart of given customer",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "If item exists in cart", content = {
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Item.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Item.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Given item (product) ID doesn't exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/carts/{customerId}/items/{itemId}",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<Item>> getCartItemsByItemId(
        @Parameter(name = "customerId", description = "Customer Identifier", required = true, in = ParameterIn.PATH) @PathVariable("customerId") String customerId,
        @Parameter(name = "itemId", description = "Item (product) Identifier", required = true, in = ParameterIn.PATH) @PathVariable("itemId") String itemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }, { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Item> <id>aeiou</id> <quantity>123</quantity> <unitPrice>3.149</unitPrice> </Item>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/customers/{id} : Returns a customer
     * Returns a customers identifiable by given ID
     *
     * @param id Customer Identifier (required)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "getCustomerById",
        summary = "Returns a customer",
        description = "Returns a customers identifiable by given ID",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = User.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customers/{id}",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<User> getCustomerById(
        @Parameter(name = "id", description = "Customer Identifier", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"userStatus\" : 6, \"phone\" : \"phone\", \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<User> <id>123456789</id> <username>aeiou</username> <firstName>aeiou</firstName> <lastName>aeiou</lastName> <email>aeiou</email> <password>aeiou</password> <phone>aeiou</phone> <userStatus>123</userStatus> </User>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/orders : Returns the orders of given user
     * Returns orders of given user
     *
     * @param customerId Customer Identifier (required)
     * @return If order exists. (status code 200)
     *         or Order doesn&#39;t exist for given user. (status code 404)
     */
    @Operation(
        operationId = "getOrdersByCustomerId",
        summary = "Returns the orders of given user",
        description = "Returns orders of given user",
        tags = { "order" },
        responses = {
            @ApiResponse(responseCode = "200", description = "If order exists.", content = {
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Order.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Order.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Order doesn't exist for given user.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<Order>> getOrdersByCustomerId(
        @NotNull @Parameter(name = "customerId", description = "Customer Identifier", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "customerId", required = true) String customerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"total\" : 1.4658129805029452, \"address\" : { \"residency\" : \"residency\", \"number\" : \"number\", \"country\" : \"country\", \"pincode\" : \"pincode\", \"city\" : \"city\", \"street\" : \"street\", \"state\" : \"state\" }, \"shipment\" : { \"carrier\" : \"carrier\", \"estDeliveryDate\" : \"2000-01-23\", \"orderId\" : \"orderId\", \"trackingNumber\" : \"trackingNumber\" }, \"payment\" : { \"authorized\" : true, \"message\" : \"message\" }, \"id\" : \"id\", \"items\" : [ { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }, { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" } ], \"card\" : { \"expires\" : \"expires\", \"ccv\" : \"ccv\", \"cardNumber\" : \"cardNumber\" }, \"customer\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"userStatus\" : 6, \"phone\" : \"phone\", \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" }, \"status\" : \"CREATED\" }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"total\" : 1.4658129805029452, \"address\" : { \"residency\" : \"residency\", \"number\" : \"number\", \"country\" : \"country\", \"pincode\" : \"pincode\", \"city\" : \"city\", \"street\" : \"street\", \"state\" : \"state\" }, \"shipment\" : { \"carrier\" : \"carrier\", \"estDeliveryDate\" : \"2000-01-23\", \"orderId\" : \"orderId\", \"trackingNumber\" : \"trackingNumber\" }, \"payment\" : { \"authorized\" : true, \"message\" : \"message\" }, \"id\" : \"id\", \"items\" : [ { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }, { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" } ], \"card\" : { \"expires\" : \"expires\", \"ccv\" : \"ccv\", \"cardNumber\" : \"cardNumber\" }, \"customer\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"userStatus\" : 6, \"phone\" : \"phone\", \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" }, \"status\" : \"CREATED\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Order> <id>aeiou</id> <date>2000-01-23T04:56:07.000Z</date> <Item> <id>aeiou</id> <quantity>123</quantity> <unitPrice>3.149</unitPrice> </Item> <total>3.149</total> <status>aeiou</status> </Order>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/orders/{id} : Returns the order of given order ID
     * Returns orders of given order ID
     *
     * @param id Order Identifier (required)
     * @return If order exists. (status code 200)
     *         or Order doesn&#39;t exist for given user. (status code 404)
     */
    @Operation(
        operationId = "getOrdersByOrderId",
        summary = "Returns the order of given order ID",
        description = "Returns orders of given order ID",
        tags = { "order" },
        responses = {
            @ApiResponse(responseCode = "200", description = "If order exists.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Order.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            }),
            @ApiResponse(responseCode = "404", description = "Order doesn't exist for given user.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders/{id}",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<Order> getOrdersByOrderId(
        @Parameter(name = "id", description = "Order Identifier", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"total\" : 1.4658129805029452, \"address\" : { \"residency\" : \"residency\", \"number\" : \"number\", \"country\" : \"country\", \"pincode\" : \"pincode\", \"city\" : \"city\", \"street\" : \"street\", \"state\" : \"state\" }, \"shipment\" : { \"carrier\" : \"carrier\", \"estDeliveryDate\" : \"2000-01-23\", \"orderId\" : \"orderId\", \"trackingNumber\" : \"trackingNumber\" }, \"payment\" : { \"authorized\" : true, \"message\" : \"message\" }, \"id\" : \"id\", \"items\" : [ { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }, { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" } ], \"card\" : { \"expires\" : \"expires\", \"ccv\" : \"ccv\", \"cardNumber\" : \"cardNumber\" }, \"customer\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"userStatus\" : 6, \"phone\" : \"phone\", \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" }, \"status\" : \"CREATED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Order> <id>aeiou</id> <date>2000-01-23T04:56:07.000Z</date> <Item> <id>aeiou</id> <quantity>123</quantity> <unitPrice>3.149</unitPrice> </Item> <total>3.149</total> <status>aeiou</status> </Order>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/payments : Returns the payment authorization
     * Return the payment authorization for the specified order
     *
     * @param id Order Identifier (required)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "getOrdersPaymentAuthorization",
        summary = "Returns the payment authorization",
        description = "Return the payment authorization for the specified order",
        tags = { "payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Authorization.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Authorization.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/payments",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<Authorization>> getOrdersPaymentAuthorization(
        @NotNull @Parameter(name = "id", description = "Order Identifier", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = true) String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"orderId\" : \"orderId\", \"authorized\" : true, \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"message\" : \"message\", \"error\" : \"error\" }, { \"orderId\" : \"orderId\", \"authorized\" : true, \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"message\" : \"message\", \"error\" : \"error\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Authorization> <orderId>aeiou</orderId> <time>2000-01-23T04:56:07.000Z</time> <authorized>true</authorized> <message>aeiou</message> <error>aeiou</error> </Authorization>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/products/{id} : Returns a product
     * Returns the product that matches the given product ID
     *
     * @param id Product Identifier (required)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "getProduct",
        summary = "Returns a product",
        description = "Returns the product that matches the given product ID",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Product.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/products/{id}",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<Product> getProduct(
        @Parameter(name = "id", description = "Product Identifier", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 0.8008281904610115, \"imageUrl\" : \"imageUrl\", \"name\" : \"name\", \"count\" : 6, \"description\" : \"description\", \"id\" : \"id\", \"tag\" : [ \"tag\", \"tag\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <id>aeiou</id> <name>aeiou</name> <description>aeiou</description> <imageUrl>aeiou</imageUrl> <price>3.149</price> <count>123</count> <tag>aeiou</tag> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/shipping : Return the Shipment
     * Return the Shipment for the specified order
     *
     * @param id Order Identifier (required)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "getShipmentByOrderId",
        summary = "Return the Shipment",
        description = "Return the Shipment for the specified order",
        tags = { "shipping" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Shipment.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Shipment.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/shipping",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<Shipment>> getShipmentByOrderId(
        @NotNull @Parameter(name = "id", description = "Order Identifier", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = true) String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"carrier\" : \"carrier\", \"estDeliveryDate\" : \"2000-01-23\", \"orderId\" : \"orderId\", \"trackingNumber\" : \"trackingNumber\" }, { \"carrier\" : \"carrier\", \"estDeliveryDate\" : \"2000-01-23\", \"orderId\" : \"orderId\", \"trackingNumber\" : \"trackingNumber\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Shipment> <orderId>aeiou</orderId> <carrier>aeiou</carrier> <trackingNumber>aeiou</trackingNumber> <estDeliveryDate>2000-01-23</estDeliveryDate> </Shipment>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/products : Returns all the matched products
     * Returns the products that matches the given query criteria
     *
     * @param tag Product tag (optional)
     * @param name Product name (optional)
     * @param page Query page number (optional, default to 1)
     * @param size Query page size (optional, default to 10)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "queryProducts",
        summary = "Returns all the matched products",
        description = "Returns the products that matches the given query criteria",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Product.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Product.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/products",
        produces = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<List<Product>> queryProducts(
        @Parameter(name = "tag", description = "Product tag", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tag", required = false) String tag,
        @Parameter(name = "name", description = "Product name", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "page", description = "Query page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Parameter(name = "size", description = "Query page size", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"price\" : 0.8008281904610115, \"imageUrl\" : \"imageUrl\", \"name\" : \"name\", \"count\" : 6, \"description\" : \"description\", \"id\" : \"id\", \"tag\" : [ \"tag\", \"tag\" ] }, { \"price\" : 0.8008281904610115, \"imageUrl\" : \"imageUrl\", \"name\" : \"name\", \"count\" : 6, \"description\" : \"description\", \"id\" : \"id\", \"tag\" : [ \"tag\", \"tag\" ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <id>aeiou</id> <name>aeiou</name> <description>aeiou</description> <imageUrl>aeiou</imageUrl> <price>3.149</price> <count>123</count> <tag>aeiou</tag> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/cards : Creates a  new card
     * Creates a new card. or replaces the existing one
     *
     * @param addCardReq  (optional)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "registerCard",
        summary = "Creates a  new card",
        description = "Creates a new card. or replaces the existing one",
        tags = { "card" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Card.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Card.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/cards",
        produces = { "application/xml", "application/json" },
        consumes = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<Card> registerCard(
        @Parameter(name = "AddCardReq", description = "") @Valid @RequestBody(required = false) AddCardReq addCardReq
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expires\" : \"expires\", \"ccv\" : \"ccv\", \"cardNumber\" : \"cardNumber\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Card> <cardNumber>aeiou</cardNumber> <expires>aeiou</expires> <ccv>aeiou</ccv> </Card>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/shipping : Ship the specified shipping request
     * Ship the specified shipping request
     *
     * @param shippingReq  (optional)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "shipOrder",
        summary = "Ship the specified shipping request",
        description = "Ship the specified shipping request",
        tags = { "shipping" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Authorization.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Authorization.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/shipping",
        produces = { "application/xml", "application/json" },
        consumes = { "application/xml", "application/json" }
    )
    
    default ResponseEntity<Authorization> shipOrder(
        @Parameter(name = "ShippingReq", description = "") @Valid @RequestBody(required = false) ShippingReq shippingReq
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"orderId\" : \"orderId\", \"authorized\" : true, \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"message\" : \"message\", \"error\" : \"error\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Authorization> <orderId>aeiou</orderId> <time>2000-01-23T04:56:07.000Z</time> <authorized>true</authorized> <message>aeiou</message> <error>aeiou</error> </Authorization>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
